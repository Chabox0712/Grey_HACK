if(params.len<1)then exit("Command: decipher [hash] [hash]......")

crypto = include_lib("/lib/crypto.so")
if not crypto then
	crypto = include_lib(current_path+"/crypto.so")
	if(not crypto)then exit("crypto.so not found.")
end if

obj = {}
obj.shell = get_shell()
obj.computer = obj.shell.host_computer

decipher_ = function(hash) //deciphers one hash provided
	return(crypto.decipher(hash))
end function

getPasswords = function(lines)//deciphers the password list splited by \n
	output = ""
	for line in lines
		if(not line)then continue
		if(line=="")then continue
		hashList = line.split(":")
		if(hashList.len != 2)then
			if(line.len == 32)then
				output = output + "\n" + "No-Name" + " " + line + " " + decipher_(line)
				continue
			end if
			output = output + "\n" + "Error" + " " + line + " " + "Hashing-Not-Supported"
			continue
		end if
		if(hashList[1].len != 32)then
			output = output + "\n" +hashList[0] + " " + hashList[1] + " " + "Invalid-Hash"
			continue
		end if
		output = output + "\n" + hashList[0] + " " + hashList[1] + " " + decipher_(hashList[1])
	end for
	return (output)
end function

getPassFile = function(path)
	filePath = obj.computer.File(path)
	if(typeof(filePath)=="file")then
		if(filePath.is_binary)then return("can't-read " + filePath.path + ". Binary-file")
		if(not filePath.has_permission("r"))then return("can't-read-file Permission-denied "+filePath.permissions)
		if(filePath.get_content.len == 0)then return("decipher: no-users-found .")
		return(getPasswords(filePath.get_content.split("\n")))
	else
		return(getPasswords(path.split("\n")))
	end if
end function

count = -1
toPrint = ""
while(count<params.len-1)
	count = count + 1
	toPrint = toPrint + getPassFile(params[count])
end while

print(format_columns(toPrint.remove(char(10)))+char(10))