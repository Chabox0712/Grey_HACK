if(params.len<1)then exit("Command: decipher [hash]")

crypto = include_lib("/lib/crypto.so")
if not crypto then
	crypto = include_lib(current_path+"/crypto.so")
	if(not crypto)then exit("crypto.so not found.")
end if

obj = {}
obj.shell = get_shell()
obj.computer = obj.shell.host_computer

filePath = obj.computer.File(params[0])

decipher_ = function(hash) //deciphers one hash provided
	return(crypto.decipher(hash))
end function

getPasswords = function(lines)//deciphers the password list splited by \n
	output = ""
	for line in lines
		if(not line)then continue
		if(line=="")then continue
		hashList = line.split(":")
		if(hashList.len != 2)then
			if(line.len == 32)then
				output = output + "\n" + "No-Name" + " " + line + " " + decipher_(line)
				continue
			end if
			output = output + "\n" + "Error" + " " + line + " " + "Hashing-Not-Supported"
			continue
		end if
		if(hashList[1].len != 32)then
			output = output + "\n" +hashList[0] + " " + hashList[1] + " " + "Invalid-Hash"
			continue
		end if
		output = output + "\n" + hashList[0] + " " + hashList[1] + " " + decipher_(hashList[1])
	end for
	return (output)
end function

if(typeof(filePath)=="file")then
	if(filePath.is_binary)then exit("decipher: can't read " + filePath.path + ". Binary file")
	if(not filePath.has_permission("r"))then exit("decipher: can't read file. Permission denied "+filePath.permissions)
	if(filePath.get_content.len == 0)then exit("decipher: no users found.")
	output = getPasswords(filePath.get_content.split("\n"))
else
	output = getPasswords(params[0].split("\n"))
end if

print(format_columns(output))
print(".")